(* This file has been auto-generated by the SPL compiler *)
exception Bad_statecall

module Vr = struct
  type state = {
    multiple_14: int;
  }

  type states = (int, state list) Hashtbl.t

  let register_state (s:int) (x:state) h =
    try let l = Hashtbl.find h s in
    if not (List.mem x l) then Hashtbl.replace h s (x :: l)
    with Not_found -> Hashtbl.add h s [x]

  let rec tick msg (s:states) : states =
    let h = Hashtbl.create 17 in
    Hashtbl.iter (fun st xs -> List.iter (fun x -> match st,msg with
    |7,`Recover (* S_or_18 *) ->
      (* S_or_21 *)
      register_state 1 x h; (* S_or_21 *)
      (* S_or_23 *)
      register_state 3 x h; (* S_or_23 *)
    |6,`Initialize (* S_initial_1 *) ->
      (* S_or_5 *)
      register_state 0 x h; (* S_or_5 *)
      (* S_or_7 *)
      register_state 4 x h; (* S_or_7 *)
    |5,`BeginViewChange (* S_or_16 *) ->
      (* S_or_21 *)
      register_state 1 x h; (* S_or_21 *)
      (* S_or_23 *)
      register_state 3 x h; (* S_or_23 *)
    |4,`Become_Replica (* S_or_7 *) ->
      (* S_or_16 *)
      register_state 5 x h; (* S_or_16 *)
      (* S_or_18 *)
      register_state 7 x h; (* S_or_18 *)
      (* S_final_2 *)
      register_state 2 x h; (* S_final_2 *)
    |3,`Become_Replica (* S_or_23 *) ->
      (* S_or_16 *)
      register_state 5 x h; (* S_or_16 *)
      (* S_or_18 *)
      register_state 7 x h; (* S_or_18 *)
      (* S_final_2 *)
      register_state 2 x h; (* S_final_2 *)
    |1,`Become_Primary (* S_or_21 *) ->
      (* S_or_16 *)
      register_state 5 x h; (* S_or_16 *)
      (* S_or_18 *)
      register_state 7 x h; (* S_or_18 *)
      (* S_final_2 *)
      register_state 2 x h; (* S_final_2 *)
    |0,`Become_Primary (* S_or_5 *) ->
      (* S_or_16 *)
      register_state 5 x h; (* S_or_16 *)
      (* S_or_18 *)
      register_state 7 x h; (* S_or_18 *)
      (* S_final_2 *)
      register_state 2 x h; (* S_final_2 *)
     |_ -> ()
    ) xs) s;
    if Hashtbl.length h = 0 then raise Bad_statecall else h

  let init () =
    let h = Hashtbl.create 17 in
    let x = {
    multiple_14 = 0;
    } in
    (* S_initial_1 *)
    register_state 6 x h; (* S_initial_1 *)
    h

  let active = function
  |7 (* S_or_18 *) -> [10]
  |6 (* S_initial_1 *) -> [0]
  |5 (* S_or_16 *) -> [8]
  |4 (* S_or_7 *) -> [4]
  |3 (* S_or_23 *) -> [15]
  |2 (* S_final_2 *) -> []
  |1 (* S_or_21 *) -> [13]
  |0 (* S_or_5 *) -> [2]
  |_ -> failwith "internal error"
end

type s = [
  |`Initialize
  |`Become_Replica
  |`BeginViewChange
  |`Become_Primary
  |`Recover
]

type t = {
  vr: Vr.states;
}

let pagefn (oc:out_channel) = ()
let set_cfn _ _ = ()
let init () = {
  vr = Vr.init ();
}


let tick s x =
  let r = match x with
  |`Initialize -> 
    {s with
    vr = (Vr.tick `Initialize s.vr);
    }
  |`Become_Replica -> 
    {s with
    vr = (Vr.tick `Become_Replica s.vr);
    }
  |`BeginViewChange -> 
    {s with
    vr = (Vr.tick `BeginViewChange s.vr);
    }
  |`Become_Primary -> 
    {s with
    vr = (Vr.tick `Become_Primary s.vr);
    }
  |`Recover -> 
    {s with
    vr = (Vr.tick `Recover s.vr);
    }
  |_ -> s in r
