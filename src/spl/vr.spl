function normal() {
  either {
    multiple {
      either {
        Receive_Prepare;
        optional { Send_Prepareok; }
      } or {
        Receive_Commit;
      } or {
        Receive_Recovery;
        Send_Recoveryresponse;
      }
    }
  } or {
    multiple {
      either {
        Receive_Request;
        optional { 
            either {
              Send_Prepare;
            } or {
              Send_Reply;
            }
        }
      } or {
        Receive_Prepareok;
        optional { Send_Reply; }
      } or {
        Send_Commit;
      } or {
        Receive_Recovery;
        Send_Recoveryresponse;
      }
    }
  }
}

function viewchange(int n_svcs, int n_dvcs, int q) {
  Send_Startviewchange;
  do {
    either {
      Receive_Startviewchange;
      n_svcs = n_svcs + 1;
    } or {
      Receive_Doviewchange;
      n_dvcs = n_dvcs + 1;
    } or {
      Send_Startviewchange;
      n_svcs = 0;
    } or (n_svcs == q-1) {
      Send_Doviewchange;
    }
  } until (n_dvcs == q);
  Send_Startview;
  optional {
    Send_Reply;
  }
}

function recovery(int n_rrs, bool prr, int q) {
  Send_Recovery;
  do {
    Receive_Recoveryresponse;
    n_rrs = n_rrs + 1;
    optional {
      Receive_Primaryrecoveryresponse;
      prr = true;
    }
  } until (n_rrs >= q && prr);
  Finish_Recovering;
}

automaton vr(int n_svcs, int n_dvcs, int n_rrs, bool prr, int q) {
  during {
    either {
      normal();
    } or {
      viewchange(n_svcs, n_dvcs, q);
    } or {
      recovery(n_rrs, prr, q);
    }
  } handle {
    Receive_Startview;
    optional { Send_Prepareok; }
  }
}
